#include <QTRSensors.h>

#define Kp .022  // experiment to determine this, 
#define Kd 2 // experiment to determine this, slowly increase the speeds and adjust this value. (Note: Kp < Kd) 
#define rightMaxSpeed 105 // max speed of the robot
#define leftMaxSpeed 105 // max speed of the robot
#define rightBaseSpeed 79 // this is the speed at which the motors should spin when the robot is perfectly on the line
#define leftBaseSpeed 80  // this is the speed at which the motors should spin when the robot is perfectly on the line
#define NUM_SENSORSLINE  6     // number of line sensors used
#define NUM_SENSORSCELL  2     // number of line sensors used
#define TIMEOUT       2000  // waits for 2500 us for sensor outputs to go low


#define rightMotordir 12
#define rightMotorbrake 9
#define rightMotorPWM 3
#define leftMotordir 13
#define leftMotorbrake 8
#define leftMotorPWM 11
#define trigPin 2
#define echoPin 0


QTRSensorsRC qtrrc((unsigned char[]) {4, 5, 16, 17, 18, 19},NUM_SENSORSLINE, TIMEOUT);
QTRSensorsRC qtrrc1((unsigned char[]) {6, 7}, NUM_SENSORSCELL, TIMEOUT);
unsigned int sensorValuesLine[NUM_SENSORSLINE];
unsigned int sensorValuesCell[NUM_SENSORSCELL];



void setup()
{
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(rightMotordir, OUTPUT);
  pinMode(rightMotorbrake, OUTPUT);
  pinMode(rightMotorPWM, OUTPUT);
  pinMode(leftMotordir, OUTPUT);
  pinMode(leftMotorbrake, OUTPUT);
  pinMode(leftMotorPWM, OUTPUT);


  // Sensor Calibration, Manual Calibration by moving line across sensors
  int i;
  for (int i = 0; i < 250; i++){ // calibrate for sometime by sliding the sensors across the line, or you may use auto-calibration instead
    qtrrc.calibrate();   
    delay(20);
  }
  delay(2000); // wait for 2s to position the bot before entering the main loop 
  Serial.begin(9600);


  /* This is to check to see what your max and min value were during calibration, will give you an idea if you got it right or not
   for (int i = 0; i < NUM_SENSORSLINE; i++)
   {
   Serial.print(qtrrc.calibratedMinimumOn[i]);
   Serial.print(' ');
   }
   Serial.println();
   
   for (int i = 0; i < NUM_SENSORSLINE; i++)
   {
   Serial.print(qtrrc.calibratedMaximumOn[i]);
   Serial.print(' ');
   }
   Serial.println();
   Serial.println();
   */
} 

int lastError = 0;

void loop()
{     
  //readCellSensor();
  //int isleftwall = isleftwallchk();
  //int isfrontwall = isfrontwallchk();
  //int isrightwall = isrightwallchk();
  
  /*
    if(isleftwall = 0);
   {
   turnleft();
   }
   else if(isfrontwall = 0);
   {
   gostraight();
   }
   else if(isrightwall = 0);
   {
   turnright();
   }  
   */

  unsigned int linesensors[5];
  int position = qtrrc.readLine(linesensors); // get calibrated readings along with the line position
  int error = position - 2500;

  /* 
   Serial.print(linesensors[0]);
   Serial.print(' ');
   Serial.print(linesensors[1]);
   Serial.print(' ');
   Serial.print(linesensors[2]);
   Serial.print(' ');
   Serial.print(linesensors[3]);
   Serial.print(' ');
   Serial.print(linesensors[4]);
   Serial.print(' ');
   Serial.print(linesensors[5]);
   Serial.print(' ');
   Serial.println();
   */

  // PID Control
  int motorSpeed = Kp * error + Kd * (error - lastError); //Ki is not really needed for line following, Kd should be much bigger than Kp since the derivative of the error is much smaller than the error itself, so to be useful, it should be large
  lastError = error;
  int rightMotorSpeed = rightBaseSpeed + motorSpeed;
  int leftMotorSpeed = leftBaseSpeed - motorSpeed;

  /*
  Serial.print(motorSpeed);
   Serial.print(' ');
   Serial.println();
   */

  if (rightMotorSpeed > rightMaxSpeed ) rightMotorSpeed = rightMaxSpeed; // prevent the motor from going beyond max speed
  if (leftMotorSpeed > leftMaxSpeed ) leftMotorSpeed = leftMaxSpeed; // prevent the motor from going beyond max speed
  if (rightMotorSpeed < 0) rightMotorSpeed = 0; // keep the motor speed positive
  if (leftMotorSpeed < 0) leftMotorSpeed = 0; // keep the motor speed positive

  {
    digitalWrite(rightMotordir, LOW);
    digitalWrite(rightMotorbrake, LOW);
    analogWrite(rightMotorPWM, rightMotorSpeed);
    digitalWrite(leftMotordir, HIGH);
    digitalWrite(leftMotorbrake, LOW);
    analogWrite(leftMotorPWM, leftMotorSpeed);
  }


} // Loop closing bracket


/*
void readCellSensor()
{
  qtrrc1.read(sensorValuesCell);
  /*
  for (unsigned char i = 0; i < NUM_SENSORSCELL; i++)
  {
    Serial.print(sensorValuesCell[i]);
    Serial.print('\t'); // tab to format the raw data into columns in the Serial monitor
  }
  Serial.println();
  
  if(sensorValuesCell[0] > 500 && sensorValuesCell[1] > 500)
  {
    turnleft();
    /*
    analogWrite(rightMotorPWM, 0);
    analogWrite(leftMotorPWM, 0);    
    digitalWrite(rightMotordir, LOW);
    digitalWrite(rightMotorbrake, LOW);
    digitalWrite(leftMotordir, HIGH);
    digitalWrite(leftMotorbrake, LOW);
    delay(2000);
   
  }
}
 */

/*
int isleftwallchk(){
  //Tester code for ultrasonic sensor, NOTE - Pins have not been set!!!, consider for statement to take average
  int iswall;
  long pinglefttime, pingleftdist;
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2); 
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW);
  pinglefttime = pulseIn(echoPin, HIGH);
  pingleftdist = (pinglefttime/2) / 29.1;
  if (pingleftdist < 4) {  
  }
  else {
  }
  if (pingleftdist >= 200 || pingleftdist <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(pingleftdist);
    Serial.println(" cm");
  }

  if (pingleftdist >  10)
  {
    iswall = 0;
  }
  else
  {
    iswall = 1;
  } 
  return iswall;
  delay(50);
}


int isrightwallchk(){
  //Tester code for ultrasonic sensor, NOTE - Pins have not been set!!!, consider for statement to take average
  int iswall;
  long pingrighttime, pingrightdist;
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2); 
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10); 
  digitalWrite(trigPin, LOW);
  pingrighttime = pulseIn(echoPin, HIGH);
  pingrightdist = (pingrighttime/2) / 29.1;
  if (pingrightdist < 4) {  
  }
  else {
  }
  if (pingrightdist >= 200 || pingrightdist <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(pingrightdist);
    Serial.println(" cm");
  }
  if (pingrightdist >  10)
  {
    iswall = 0;
  }
  else
  {
    iswall = 1;
  } 
  return iswall;
  delay(50);
}  


int isfrontwallchk(){
  //Tester code for ultrasonic sensor, NOTE - Pins have not been set!!!, consider for statement to take average
  int iswall;
  long pingfronttime, pingfrontdist;
  digitalWrite(trigPin, LOW); 
  delayMicroseconds(2); 
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(1000); 
  digitalWrite(trigPin, LOW);
  pingfronttime = pulseIn(echoPin, HIGH);
  pingfrontdist = (pingfronttime/2) / 29.1;
  if (pingfrontdist < 4) {  
  }
  else {
  }
  if (pingfrontdist >= 200 || pingfrontdist <= 0){
    Serial.println("Out of range");
  }
  else {
    Serial.print(pingfrontdist);
    Serial.println(" cm");
  }
  
  if (pingfrontdist >  10)
  {
    iswall = 0;
  }
  else
  {
    iswall = 1;
  } 
  return iswall;
  delay(50);
}  
*/
/*
void turnleft()
 {
 digitalWrite(rightMotordir, LOW);
 digitalWrite(rightMotorbrake, LOW);
 analogWrite(rightMotorPWM, 95);
 digitalWrite(leftMotordir, LOW);
 digitalWrite(leftMotorbrake, LOW);
 analogWrite(leftMotorPWM, 95);
 delay(400);
 }
 */
 /*
 void turnright()
 {
 digitalWrite(rightMotordir, HIGH);
 digitalWrite(rightMotorbrake, LOW);
 analogWrite(rightMotorPWM, 90);
 digitalWrite(leftMotordir, LOW);
 digitalWrite(leftMotorbrake, LOW);
 analogWrite(leftMotorPWM, 90);
 }*/







